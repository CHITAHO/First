#include<stdio.h>

#include<stdlib.h>



struct node {

	int number;

	struct node *next;

};



void addSet(struct node *set, int number){

	struct node *newElement = (struct node*)malloc(sizeof(struct node));

	newElement->number = number;

	newElement->next = NULL;

	while (set->next != NULL){

		set = set->next;

	}

	set->next = newElement;

}



int subSet(struct node *firstSet, struct node *secondSet){

	if (firstSet == NULL){

		return 0;

	}

	else{

		while (firstSet != NULL){

			if (secondSet == NULL) {

				return firstSet->number;

			}

			else if (firstSet->number < secondSet->number){

				return firstSet->number;

			}

			else if (firstSet->number > secondSet->number){

				secondSet = secondSet->next;

			}

			else{

				firstSet = firstSet->next;

				secondSet = secondSet->next;

			}

		}

		return 0;

	}

}



void freeSet(struct node *set) {

	struct node *ptr = set;

	while (ptr != NULL){

		set = set->next;

		free(ptr);

		ptr = set;

	}

}



void main(){

	int setSize, number;

	struct node *firstSet = (struct node*)malloc(sizeof(struct node));

	struct node *secondSet = (struct node*)malloc(sizeof(struct node));

	firstSet->number = NULL;

	secondSet->number = NULL;

	firstSet->next = NULL;

	secondSet->next = NULL;

	scanf("%d", &setSize);

	for (int i = 0; i < setSize; i++){

		if (i == 0){

			scanf("%d", &number);

			firstSet->number = number;

		}

		else{

			scanf("%d", &number);

			addSet(firstSet, number);

		}

	}

	scanf("%d", &setSize);

	for (int i = 0; i < setSize; i++) {

		if (i == 0) {

			scanf("%d", &number);

			secondSet->number = number;

		}

		else {

			scanf("%d", &number);

			addSet(secondSet, number);

		}

	}

	printf("%d\n", subSet(firstSet, secondSet));

	freeSet(firstSet);

	freeSet(secondSet);

}