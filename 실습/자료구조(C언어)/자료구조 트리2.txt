#include<stdio.h>

#include<stdlib.h>



struct node {

	int id;

	int data;

	struct node *left;

	struct node *right;

};



void addLeftchild(struct node *parent, int value, int id){

	struct node *newnode = (struct node*)malloc(sizeof(struct node));

	newnode->data = value;

	newnode->id = id;

	newnode->left = NULL;

	newnode->right = NULL;

	parent->left = newnode;

}



void addRightchild(struct node *parent, int value, int id){

	struct node *newnode = (struct node*)malloc(sizeof(struct node));

	newnode->data = value;

	newnode->id = id;

	newnode->left = NULL;

	newnode->right = NULL;

	parent->right = newnode;

}



void preOrder(struct node *tree){

	if (tree == NULL) {

		return;

	}

	printf(" %d", tree->data);

	preOrder(tree->left);

	preOrder(tree->right);

}



void inOrder(struct node *tree) {

	if (tree == NULL) {

		return;

	}

	inOrder(tree->left);

	printf(" %d", tree->data);

	inOrder(tree->right);

}



void postOrder(struct node *tree){

	if (tree == NULL) {

		return;

	}

	postOrder(tree->left);

	postOrder(tree->right);

	printf(" %d", tree->data);

}



void freeTree(struct node *tree) {

	if (tree == NULL) {

		return;

	}

	freeTree(tree->left);

	freeTree(tree->right);

	free(tree);

}



void treeOrder(struct node *tree, int order, int id) {

	if (tree == NULL) {

		return;

	}

	if (tree->id == id) {

		if (order == 1) {

			preOrder(tree);

		}

		else if (order == 2) {

			inOrder(tree);

		}

		else if (order == 3) {

			postOrder(tree);

		}

	}

	else {

		treeOrder(tree->left, order, id);

		treeOrder(tree->right, order, id);

	}

}



void main(){

	int order, id;

	struct node *root, *p, *tree = (struct node*)malloc(sizeof(struct node));

	root = tree;

	tree->data = 20;

	tree->id = 1;

	tree->left = NULL;

	tree->right = NULL;

	addLeftchild(tree, 30, 2);

	addRightchild(tree, 50, 3);

	addLeftchild(tree->left, 70, 4);

	addRightchild(tree->left, 90, 5);

	addRightchild(tree->right, 120, 6);

	addLeftchild(tree->right->right, 130, 7);

	addRightchild(tree->right->right, 80, 8);

	scanf("%d", &order);

	scanf("%d", &id);

	if ((1 <= id) && (id <= 8)) {

		treeOrder(root, order, id);

		printf("\n");

	}

	else {

		printf("-1\n");

	}

	freeTree(root);

}