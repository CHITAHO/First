#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning(disable:4996)
#define MAX_NUM 100

typedef struct tel { //구조체
	char *name;
	char *phone;
	char *birth;
}TEL;

void sort(int n, TEL* tel_lists) //정렬 
{
	TEL* p, * q;
	TEL tmp;
	for (p = tel_lists; p < tel_lists + n; p++)
	{
		for (q = tel_lists + n - 1; q > p; q--)
		{
			if (strcmp(q->name, (q - 1)->name) < 0)
			{
				tmp = *q;
				*q = *(q-1);
				*(q-1) = tmp;
			}
		}
	}
}
int input(char* str, int remit)//입력에 에러 있으면 1, 없으면 0
{
	char* p;
	gets(str);
	if (*(str + remit) != 0)
	{
		printf("OVERFLOW\n");
		return 1;
	}
	return 0;
}
int regist(int n, TEL* tel_lists) //등록
{
	TEL* p = tel_lists + n;
	char name[MAX_NUM] = { 0 }, phone[MAX_NUM] = { 0 }, birth[MAX_NUM] = { 0 }; //선언 및 초기화

	printf("Name:");
	if (input(p->name, MAX_NUM)) //입력
		return;
	printf("Phone_number:");
	if (input(p->phone, MAX_NUM)) //입력
		return;
	printf("Birth:");
	if (input(p->birth, MAX_NUM)) //입력
		return;
	p->name = (char*)malloc(sizeof(char) * (strlen(name) + 1));
	strcpy(p->name, name);
	p->phone = (char*)malloc(sizeof(char) * (strlen(phone) + 1));
	strcpy(p->phone, phone);
	p->birth = (char*)malloc(sizeof(char) * (strlen(birth) + 1));
	strcpy(p->birth, birth);

	n++; //카운트 증가
	sort(n, tel_lists); //정렬
	printf("<<%d>>\n", n); //카운트 출력
	return n;
}
void showAll(int n, TEL* tel_lists) // 모두 출력
{
	TEL* p;
	for (p = tel_lists; p < tel_lists + n; p++)
		printf("%s %s %s\n", p->name, p->phone, p->birth);
}
int del(int n, TEL* tel_lists) //삭제
{
	char query[21] = { 0 };
	TEL* p;
	TEL tmp;
	int flag = 1;

	if (n == 0) //정보 없으면
	{
		printf("NO MEMBER\n");
		return 0;
	}

	printf("Name:");
	gets(query); //삭제할 이름 입력

	for (p = tel_lists; p < tel_lists + n; p++)
		if (!strcmp(query, p->name)) //같으면 플래그 0
		{
			flag = 0;
			break;
		}

	if (flag) 
	{
		printf("NO MEMBER\n");
		return n;
	}

	for (p; p < tel_lists + n - 1; p++) {
		tmp = *p;
		*p = *(p+1);
		*(p+1) = tmp;
	}
	n = n - 1; //카운트 감소
	return n;
}
void find(int n, TEL* tel_lists)
{
	char query[3] = { 0 };
	int q, c;
	TEL* p;

	printf("Birth:");
	gets(query);

	q = atoi(query);

	for (p = tel_lists; p < tel_lists + n; p++)
	{
		query[0] = p->birth[4];
		query[1] = p->birth[5];

		c = atoi(query);

		if (q == c)
			printf("%s %s %s\n", p->name, p->phone, p->birth);
	}
}


int main()
{
	TEL* tel_lists;  

	int c;
	int n = 0; //카운트변수
	TEL* p;
	tel_lists = (TEL *)malloc(sizeof(TEL) * MAX_NUM);
	while (1)
	{
		printf("*****Menu*****\n");
		printf("<1.Registration><2.ShowAll><3.Delete><4.FindByBirth><5.Exit>\n");
		printf("Enter_the_menu_number:");
		scanf("%d", &c);
		getchar();

		if (c == 1)//Registration
			n = regist(n, tel_lists);
		if (c == 2)//show all
			showAll(n, tel_lists);
		if (c == 3)//delete
			n = del(n, tel_lists);
		if (c == 4)//Find By Birth
			find(n, tel_lists);
		if (c == 5)//Exit
			break;
	}
	for (p = tel_lists; p < tel_lists + n; p++)
	{
		free(p->name);
		free(p->phone);
		free(p->birth);
	}
	free(tel_lists);
	return 0;
}