#include<GL/glut.h>
#include<gl/freeglut.h>
#include<stdlib.h>
#include<math.h>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

int filter = 0;
double rotate_y = 0;
double rotate_x = 0;
static GLfloat spin = 1.0;
double zoom = 0;
int mouseCurPositionX, mouseCurPositionY, mouseCurButton;
float radius = 10.0f;
double xini = 0, yini = 0;
static GLuint texture[4];

static void
drawBox(GLfloat size, GLenum type)
{
    static GLfloat n[6][3] =
    {
      {-1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {1.0, 0.0, 0.0},
      {0.0, -1.0, 0.0},
      {0.0, 0.0, 1.0},
      {0.0, 0.0, -1.0}
    };
    static GLint faces[6][4] =
    {
      {0, 1, 2, 3},
      {3, 2, 6, 7},
      {7, 6, 5, 4},
      {4, 5, 1, 0},
      {5, 6, 2, 1},
      {7, 4, 0, 3}
    };
    GLfloat v[8][3];
    GLint i;
    v[0][0] = v[1][0] = v[2][0] = v[3][0] = -size / 2;
    v[4][0] = v[5][0] = v[6][0] = v[7][0] = size / 2;
    v[0][1] = v[1][1] = v[4][1] = v[5][1] = -size / 2;
    v[2][1] = v[3][1] = v[6][1] = v[7][1] = size / 2;
    v[0][2] = v[3][2] = v[4][2] = v[7][2] = -size / 2;
    v[1][2] = v[2][2] = v[5][2] = v[6][2] = size / 2;

    for (i = 5; i >= 0; i--) {

        glBegin(type);
        glNormal3fv(&n[i][0]);
        glTexCoord2f(0.0f, 0.0f);
        glVertex3fv(&v[faces[i][0]][0]);
        glTexCoord2f(0.0f, 1.0f);
        glVertex3fv(&v[faces[i][1]][0]);
        glTexCoord2f(1.0f, 1.0f);
        glVertex3fv(&v[faces[i][2]][0]);
        glTexCoord2f(1.0f, 0.0f);
        glVertex3fv(&v[faces[i][3]][0]);
        glEnd();
    }
}
void APIENTRY
glutSolidCube(GLdouble size)
{

    drawBox(size, GL_QUADS);
}

void wall(double thickness)    // function to create the walls with given thickness
{
    glPushMatrix();
    glTranslated(0.5, 0.5 * thickness, 0.5);
    glScaled(2.0, thickness, 2.0);
    glutSolidCube(1.0);
    glPopMatrix();
}

void init(void) {
    GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat position[] = { 3.0, 3.0,1.0, 0.0 };
    GLfloat ambient1[] = { 0.7, 0.7, 0.7, 1.0 };
    GLfloat diffuse1[] = { 0.2, 0.2, 0.2, 1.0 };
    GLfloat specular1[] = { 1.0, 0.5, 0.5, 1.0 };
    GLfloat position1[] = { 3.0, 3.0,1.0, 0.0 };
    GLfloat ambient2[] = { 0.1, 0.1, 0.1, 1.0 };
    GLfloat diffuse2[] = { 0.1, 0.1, 0.1, 1.0 };
    GLfloat specular2[] = { 0, 1.5, 1.0, 1.0 };
    GLfloat position2[] = { 5.0, 1.0,1.0, 0.0 };
    GLfloat lmodel_ambient[] = { 0.4, 0.4, 0.4, 1.0 }; 
    GLfloat local_view[] = { 0.0 };
    glClearColor(1.0, 0.0, 0.0, 0.0);
    glEnable(GL_DEPTH_TEST);
    glShadeModel(GL_SMOOTH);
    glGenTextures(4, texture);
    glEnable(GL_TEXTURE_GEN_S);
    glEnable(GL_TEXTURE_GEN_T);

    glBindTexture(GL_TEXTURE_2D, texture[0]);
    // 텍스처 wrapping/filtering 옵션 설정(현재 바인딩된 텍스처 객체에 대해)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    // 텍스처 로드 및 생성
    int width, height, nrChannels;
    unsigned char* data = stbi_load("container512.jpg", &width, &height, &nrChannels, 0);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

    glBindTexture(GL_TEXTURE_2D, texture[1]);
    // 텍스처 wrapping/filtering 옵션 설정(현재 바인딩된 텍스처 객체에 대해)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    // 텍스처 로드 및 생성
    unsigned char* data1 = stbi_load("container512.jpg", &width, &height, &nrChannels, 0);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data1);

    glBindTexture(GL_TEXTURE_2D, texture[2]);
    // 텍스처 wrapping/filtering 옵션 설정(현재 바인딩된 텍스처 객체에 대해)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    // 텍스처 로드 및 생성
    unsigned char* data2 = stbi_load("wall.jpg", &width, &height, &nrChannels, 0);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data2);


    glBindTexture(GL_TEXTURE_2D, texture[3]);
    // 텍스처 wrapping/filtering 옵션 설정(현재 바인딩된 텍스처 객체에 대해)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    // 텍스처 로드 및 생성
    unsigned char* data3 = stbi_load("teapot.jpg", &width, &height, &nrChannels, 0);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data3);

    glBindTexture(GL_TEXTURE_2D, texture[4]);
    // 텍스처 wrapping/filtering 옵션 설정(현재 바인딩된 텍스처 객체에 대해)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    // 텍스처 로드 및 생성
    unsigned char* data4 = stbi_load("screen.jpg", &width, &height, &nrChannels, 0);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data4);

    glEnable(GL_TEXTURE_2D);
    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, specular);
    glLightfv(GL_LIGHT0, GL_POSITION, position);
    glLightfv(GL_LIGHT1, GL_AMBIENT, ambient1);
    glLightfv(GL_LIGHT1, GL_DIFFUSE, diffuse1);
    glLightfv(GL_LIGHT1, GL_DIFFUSE, specular1);
    glLightfv(GL_LIGHT1, GL_POSITION, position1);
    glLightfv(GL_LIGHT2, GL_AMBIENT, ambient2);
    glLightfv(GL_LIGHT2, GL_DIFFUSE, diffuse2);
    glLightfv(GL_LIGHT2, GL_DIFFUSE, specular2);
    glLightfv(GL_LIGHT2, GL_POSITION, position2);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
}
void displaySolid() {    //function to create a 3d room
    GLfloat no_mat[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat mat_ambient[] = { 0.1, 0.1, 0.1, 1.0 };
    GLfloat mat_ambient_color[] = { 0.8, 0.8, 0.2, 1.0 };
    GLfloat mat_diffuse[] = { 0.0, 1.0, 1.0, 1.0 };
    GLfloat mat_diffuse2[] = { 0.5, 0.0, 1.0, 1.0 };
    GLfloat mat_diffuse3[] = { 0.60, 0.45, 0.4, 1.0 };
    GLfloat mat_diffuse4[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat mat_diffuse5[] = { 0.1, 0.1, 0.1, 1.0 };
    GLfloat mat_specular[] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat mat_specular2[] = {0.7, 0.7, 0.7, 1.0 };
    GLfloat no_shininess[] = { 0.0 };
    GLfloat low_shininess[] = { 5.0 };
    GLfloat high_shininess[] = { 100.0 };
    GLfloat mat_emission[] = { 0.3, 0.2, 0.2, 0.0 };

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45+zoom, 640/480, 1, 400);
    gluLookAt(sin(spin) * radius, 5.0, cos(spin) * radius, 0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
    glColor3f(1.0f, 1.0f, 1.0f);
    glTranslated(0+ rotate_y, 0, 0);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse3);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[2]);
    wall(0.1);//바닥
    glPopMatrix();
    glPushMatrix();
    glTranslated(0+ rotate_y, 0.5, -0.5);
    glRotated(-90.0, 0.1, 0.0, 0.0);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[2]);
    wall(0.02);//벽
    glPopMatrix();
    
    glPushMatrix();
    glTranslated(-0.5+ rotate_y, 1.5, 0);
    glRotated(-90.0 , 0.0, 0.0, 0.1);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[2]);
    wall(0.02);//벽
    glPopMatrix();

    glPushMatrix();
    glTranslated(1.275+ rotate_y, 0.275, 0.15);
    glScalef(1.0, 0.5, 2.5);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse2);
    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[1]);
    glutSolidCube(0.5);//침대
    glPopMatrix();

    glPushMatrix();
    glTranslated(-0.24+ rotate_y, 0.8,-0.25);
    glScalef(1.0, 3,1.0);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse3);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[filter]);
    glutSolidCube(0.5);//장롱
    glPopMatrix();
    glPushMatrix();


    glPushMatrix();
    glTranslated(-0.24+ rotate_y, 0.8, 1.37);
    glScalef(1.0, 3.0, 0.5);
    glBindTexture(GL_TEXTURE_2D, texture[filter]);
    glutSolidCube(0.5);//책장
    glPopMatrix();

    glPushMatrix();
    glTranslated(-0.24+ rotate_y, 1.0, 0.7);
    glScalef(1, 0.5, 2.4);
    glEnable(GL_TEXTURE_GEN_S);
    glEnable(GL_TEXTURE_GEN_T);
    glEnable(GL_TEXTURE_GEN_R);
    glBindTexture(GL_TEXTURE_2D, texture[filter]);
   
    glutSolidCube(0.5);//책상
    glPopMatrix();

    glPushMatrix();
    glTranslated(-0.24+ rotate_y, 0.5, 0.35);
    glScalef(1.0, 2.0, 1);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//책상다리
    glPopMatrix();



    glPushMatrix();
    glTranslated(-0.2+ rotate_y, 1.5, 0.8);
    glScalef(0.2, 1, 1);
    glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse4);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[4]);
    glutSolidCube(0.5);//모니터
    glPopMatrix();

    glPushMatrix();
    glTranslated(-0.2 + rotate_y, 1.0, 0.8);
    glScalef(0.2, 1, 1);
    glRotatef(-120, 1, 1, 1);
    glColor3f(0, 1, 1);
    glBindTexture(GL_TEXTURE_2D, texture[4]);
    glutSolidCone(0.1,0.5,20,20);//모니터받침
    glPopMatrix();


   
    glPushMatrix();
    glTranslated(0.5 + rotate_y, 0.7, 1);
    glScalef(1, 0.2, 1);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse5);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//의자
    glPopMatrix();

    glPushMatrix();
    glTranslated(0.75 + rotate_y, 1, 1);
    glScalef(0.2, 1.25, 1);

    glutSolidCube(0.5);//의자 등받침
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glPopMatrix();

    glPushMatrix();
    glTranslated(0.3 + rotate_y, 0.5, 0.8);
    glScalef(0.1, 0.9, 0.1);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//다리1
    glPopMatrix();

    glPushMatrix();
    glTranslated(0.3 + rotate_y, 0.5, 1.22);
    glScalef(0.1, 0.9, 0.1);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//다리2
    glPopMatrix();

    glPushMatrix();
    glTranslated(0.75 + rotate_y, 0.5, 1.2);
    glScalef(0.1, 0.9, 0.1);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//다리3
    glPopMatrix();

    glPushMatrix();
    glTranslated(0.75 + rotate_y, 0.5, 0.8);
    glScalef(0.1, 0.9, 0.1);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glutSolidCube(0.5);//다리4
    glPopMatrix();

    glPushMatrix();
    glTranslated(1.275+ rotate_y, 0.5, 0.15);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse3);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat);
    glBindTexture(GL_TEXTURE_2D, texture[3]);
    glEnable(GL_TEXTURE_GEN_S);
    glEnable(GL_TEXTURE_GEN_T);
    glutSolidTeapot(0.2);
    glPopMatrix();


    glutSwapBuffers();
}
void DoKeyboard(unsigned char key, int x, int y)
{
    switch (key) {
    case '0': //빛없음
        glDisable(GL_TEXTURE_2D);
        break;
    case '1': //1번빛
        glEnable(GL_TEXTURE_2D);
        break;
    case '2': //메인빛 2번빛
        filter = 0;
        break;
    case '3': //3가지 
        filter = 1;
        break;
    case '4': //3가지 
        glEnable(GL_LIGHT0);
        break;
    }
    glutPostRedisplay();
}
void mouse(int button, int state, int x, int y)
{
    //Right arrow - increase rotation by 5 degree
    if (state == GLUT_DOWN && button == GLUT_LEFT_BUTTON)
    {
        spin = spin + 0.1;
     
    }
    if (state == GLUT_UP) { // when the button is released
        switch (button) {
        case GLUT_LEFT_BUTTON:
            xini = 0;
            break;
        case GLUT_RIGHT_BUTTON:
            yini = 0;
            break;
        }
    }
    else {
        switch (button) {
        case GLUT_LEFT_BUTTON:
            xini = x;
            break;
        case GLUT_RIGHT_BUTTON:
            yini = y;
            break;
        }
    }

    glutPostRedisplay();
}
void mouseMotion(int x, int y)
{
    if(xini>0){
        if (x< mouseCurPositionX)
        {
            spin += 0.1;
        }
        if (x > mouseCurPositionX) {
            spin -= 0.1;
        }
    }
    if(yini>0){
        if (y < mouseCurPositionY)
        {
            zoom -= 1;
        }
        if (y > mouseCurPositionY) {
            zoom += 1;
        }
    }
    
    mouseCurPositionX = x;
    mouseCurPositionY = y;

    glutPostRedisplay();
}
/*void passiveMotion(int x, int y) {
    
        if (y < mouseCurPositionY)
        {
            zoom += 1;
        }
        if (y > mouseCurPositionY) {
            zoom -= 1;
        }
    
    mouseCurPositionX = x;
    mouseCurPositionY = y;
    glutPostRedisplay();
}*/
void mousewheel(int wheel, int direction, int x, int y) {
    if (direction > 0) {
        rotate_y += 1;
    }
    else
        rotate_y -= 1;
    glutPostRedisplay();
}

void main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("15012974 최태호");
    glutDisplayFunc(displaySolid);
    init();
    glutKeyboardFunc(DoKeyboard);
    glutMouseFunc(mouse);
    glutMouseWheelFunc(mousewheel);
    glutMotionFunc(mouseMotion);
   // glutPassiveMotionFunc(passiveMotion);
    glClearColor(0.1, 0.1, 0.1, 0.0);
    glutMainLoop();
}