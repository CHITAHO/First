library ieee ;
use ieee.std_logic_1164.all ;
use ieee.std_logic_arith.all ;
use ieee.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;
entity BS is
	port (
		enable,enable_or: in std_logic;
		clk,rst_n : in std_logic;
		data : inout std_logic_vector(7 downto 0)
	);
end BS;

architecture behavioral of BS is

signal count : integer range 0 to 255;

begin
process(rst_n,enable_or)
begin
if(rst_n ='0') then
data <="ZZZZZZZZ";
elsif(enable_or='0')then
data<="ZZZZZZZZ";
elsif(enable_or'event and enable_or='1')then
if data="11111111" then
data<="00000000";
else
count<=count+1;
data<=std_logic_vector(to_unsigned(count,8));
end if;
end if;
end process;

end ;

library ieee ;
use ieee.std_logic_1164.all ;
use ieee.std_logic_arith.all ;
use ieee.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;
entity tb_BS is
end tb_BS;

architecture sim of tb_BS is
component BS port (
		enable,enable_or: in std_logic;
		data : inout std_logic_vector(7 downto 0);
		clk,rst_n : in std_logic
	);
end component;

constant HALF_PERIOD_1H : time := 20 ns ;

	signal data : std_logic_vector(7 downto 0);
	signal enable1,enable2,enable_or: std_logic;
	signal clk,rst_n: std_logic;

begin	
enable_or <= enable1 or enable2;

rst_n <= '0','1'after 30ns ;
clk_gen : process
begin 
while (true) loop
clk <= '0' ; wait for HALF_PERIOD_1H ;
clk <= '1' ; wait for HALF_PERIOD_1H ;
end loop;
end process;
	enable1 <= '0', '1' after 400 ns, '0' after 480 ns, '1' after 880 ns, '0' after 960 ns,'1' after 1360 ns, '0' after 1440 ns,'1' after 1840 ns, '0' after 1900 ns;
	enable2 <= '0', '1' after 640 ns, '0' after 720 ns, '1' after 1120 ns, '0' after 1200 ns, '1' after 1600 ns, '0' after 1680 ns, '1' after 2080 ns, '0' after 2160 ns;
	u0 : BS port map(clk=>clk,rst_n=>rst_n,enable=>enable1,enable_or=>enable_or,data=>data);
	u1 : BS port map(clk=>clk,rst_n=>rst_n,enable=>enable2,enable_or=>enable_or,data=>data);
	
end sim ;