#include<stdio.h>

#include<stdlib.h>

struct node {

	int number;

	struct node *next;

};



void addSet(struct node *set, int number) {

	struct node *newElement = (struct node*)malloc(sizeof(struct node));

	newElement->number = number;

	newElement->next = NULL;

	while (set->next != NULL) {

		set = set->next;

	}

	set->next = newElement;

}



struct node *Union(struct node *firstSet, struct node *secondSet){

	struct node *first = firstSet;

	struct node *second = secondSet;

	struct node *sumSet = (struct node*)malloc(sizeof(struct node));

	sumSet->number = NULL;

	sumSet->next = NULL;

	if ((first->next == NULL) && (second->next == NULL)){

		return sumSet;

	}

	else if (first->next == NULL){

		free(sumSet);

		return second;

	}

	else if (second->next == NULL){

		free(sumSet);

		return first;

	}

	else{

		first = first->next;

		second = second->next;

		while ((first != NULL) && (second != NULL)){

			if (first->number == second->number){

				addSet(sumSet, first->number);

				first = first->next;

				second = second->next;

			}

			else if (first->number < second->number){

				addSet(sumSet, first->number);

				first = first->next;

			}

			else if (first->number > second->number){

				addSet(sumSet, second->number);

				second = second->next;

			}

		}

		while (first != NULL){

			addSet(sumSet, first->number);

			first = first->next;

		}

		while (second != NULL){

			addSet(sumSet, second->number);

			second = second->next;

		}

	}

	return sumSet;

}



struct node *intersect(struct node *firstSet, struct node *secondSet){

	struct node *first = firstSet;

	struct node *second = secondSet;

	struct node *intersect = (struct node*)malloc(sizeof(struct node));

	intersect->number = NULL;

	intersect->next = NULL;

	if ((first->next == NULL) && (second->next == NULL)){

		return intersect;

	}

	else if (first->next == NULL){

		return intersect;

	}

	else if (second->next == NULL){

		return intersect;

	}

	else{

		first = first->next;

		second = second->next;

		while ((first != NULL) && (second != NULL)){

			if (first->number == second->number){

				addSet(intersect, first->number);

				first = first->next;

				second = second->next;

			}

			else if (first->number < second->number){

				first = first->next;

			}

			else if (first->number > second->number){

				second = second->next;

			}

		}

	}

	return intersect;

}



void printSet(struct node *set) {

	struct node *ptr = set->next;

	if (ptr == NULL) {

		printf(" 0\n");

	}

	else {

		while (ptr != NULL) {

			printf(" %d", ptr->number);

			ptr = ptr->next;

		}

		printf("\n");

	}

}



void freeSet(struct node *set) {

	struct node *ptr = set;

	while (ptr != NULL) {

		set = set->next;

		free(ptr);

		ptr = set;

	}

}



void main(){

	int setSize, number;

	struct node *firstSet = (struct node*)malloc(sizeof(struct node));

	struct node *secondSet = (struct node*)malloc(sizeof(struct node));

	struct node *sumSet, *intersectSet;

	firstSet->number = NULL;

	firstSet->next = NULL;

	secondSet->number = NULL;

	secondSet->next = NULL;

	

	scanf("%d", &setSize);

	for (int i = 0; i < setSize; i++){

		scanf("%d", &number);

		addSet(firstSet, number);

	}

	scanf("%d", &setSize);

	for (int i = 0; i < setSize; i++) {

		scanf("%d", &number);

		addSet(secondSet, number);

	}



	sumSet = Union(firstSet, secondSet);

	printSet(sumSet);

	intersectSet = intersect(firstSet, secondSet);

	printSet(intersectSet);



	freeSet(firstSet);

	freeSet(secondSet);

	if ((sumSet != firstSet) && (sumSet != secondSet)) {

		freeSet(sumSet);

	}

	freeSet(intersectSet);

}